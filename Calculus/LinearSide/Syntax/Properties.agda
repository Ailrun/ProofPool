module Calculus.LinearSide.Syntax.Properties where

open import Data.Nat hiding (_/_)
import Data.Nat.Properties as ‚Ñï
open import Data.Fin using (Fin; zero; suc)
import Data.Fin as Fin
import Data.Fin.Properties as Fin
open import Data.Fin.Substitution
open import Data.Fin.Substitution.Lemmas
open import Data.Product using (_√ó_; -,_; <_,_>; uncurry)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
import Data.Sum as Œ£
import Data.Vec as Vec
import Data.Vec.Properties as Vec
open import Relation.Binary.Construct.Closure.ReflexiveTransitive using (Œµ; _‚óÖ_; _‚ñª_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
import Relation.Binary.PropositionalEquality as ‚â°
open import Relation.Nullary using (Dec; yes; no)
import Relation.Nullary.Decidable as Dec

open import Calculus.LinearSide.Syntax

<‚áílift‚â° : ‚àÄ {f : Fin n ‚Üí Fin n‚Ä≤} ‚Üí
          Fin.to‚Ñï x < m ‚Üí
          Fin.to‚Ñï x ‚â° Fin.to‚Ñï (Fin.lift m f x)
<‚áílift‚â° {m = suc m} {x = zero}  (s‚â§s x<) = refl
<‚áílift‚â° {m = suc m} {x = suc x} (s‚â§s x<) = ‚â°.cong suc (<‚áílift‚â° x<)

‚â•‚áílift‚â• : ‚àÄ {f : Fin n ‚Üí Fin n‚Ä≤} ‚Üí
          Fin.to‚Ñï x ‚â• m ‚Üí
          Fin.to‚Ñï (Fin.lift m f x) ‚â• m
‚â•‚áílift‚â• {m = zero}  {x = _}     x‚â•       = z‚â§n
‚â•‚áílift‚â• {m = suc m} {x = suc x} (s‚â§s x‚â•) = s‚â§s (‚â•‚áílift‚â• x‚â•)

‚Üë ≥reduce‚â•‚â°id : ‚àÄ {n m} {x : Fin (n + m)} ‚Üí
               (x‚â• : Fin.to‚Ñï x ‚â• n) ‚Üí
               x ‚â° (n Fin.‚Üë ≥ (Fin.reduce‚â• x x‚â•))
‚Üë ≥reduce‚â•‚â°id {zero}  {_} {_} x‚â• = refl
‚Üë ≥reduce‚â•‚â°id {suc n} {_} {suc x} (s‚â§s x‚â•) = ‚â°.cong suc (‚Üë ≥reduce‚â•‚â°id x‚â•)

var‚Çó-injective : var‚Çó x ‚â° var‚Çó y ‚Üí
                 x ‚â° y
var‚Çó-injective refl = refl

module ùïÑApp {‚Ñì} {T : ‚Ñï ‚Üí Set ‚Ñì} (l : Lift T ùïÑ) where
  open Lift l hiding (var) public

  infixl 8 _/_

  _/_ : ùïÑ m ‚Üí Sub T m n ‚Üí ùïÑ n
  var‚Çó x            / œÉ = lift (Vec.lookup œÉ x)
  Œª‚Çó T ‚àò‚Çó M         / œÉ = Œª‚Çó T ‚àò‚Çó (M / œÉ ‚Üë)
  M $‚àò‚Çó N           / œÉ = (M / œÉ) $‚àò‚Çó (N / œÉ)
  bang‚Çó M           / œÉ = bang‚Çó (M / œÉ)
  let-bang‚Çó M in‚Çó N / œÉ = let-bang‚Çó (M / œÉ) in‚Çó (N / œÉ ‚Üë)

  open Application (record { _/_ = _/_ }) using (_/‚ú∂_) public

  Œª‚Çó‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ : ‚àÄ k {m n U M} (œÉs : Subs T m n) ‚Üí
               Œª‚Çó U ‚àò‚Çó M /‚ú∂ œÉs ‚Üë‚ú∂ k ‚â° Œª‚Çó U ‚àò‚Çó (M /‚ú∂ œÉs ‚Üë‚ú∂ suc k)
  Œª‚Çó‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ k Œµ        = refl
  Œª‚Çó‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ k (œÉ ‚óÖ œÉs) = ‚â°.cong‚ÇÇ _/_ (Œª‚Çó‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ k œÉs) refl

  $‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ : ‚àÄ k {m n M N} (œÉs : Subs T m n) ‚Üí
              M $‚àò‚Çó N /‚ú∂ œÉs ‚Üë‚ú∂ k ‚â° (M /‚ú∂ œÉs ‚Üë‚ú∂ k) $‚àò‚Çó (N /‚ú∂ œÉs ‚Üë‚ú∂ k)
  $‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ k Œµ        = refl
  $‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ k (œÉ ‚óÖ œÉs) = ‚â°.cong‚ÇÇ _/_ ($‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ k œÉs) refl

  bang‚Çó-/‚ú∂-‚Üë‚ú∂ : ‚àÄ k {m n M} (œÉs : Subs T m n) ‚Üí
               bang‚Çó M /‚ú∂ œÉs ‚Üë‚ú∂ k ‚â° bang‚Çó (M /‚ú∂ œÉs ‚Üë‚ú∂ k)
  bang‚Çó-/‚ú∂-‚Üë‚ú∂ k Œµ        = refl
  bang‚Çó-/‚ú∂-‚Üë‚ú∂ k (œÉ ‚óÖ œÉs) = ‚â°.cong‚ÇÇ _/_ (bang‚Çó-/‚ú∂-‚Üë‚ú∂ k œÉs) refl

  let-bang‚Çó-in‚Çó-/‚ú∂-‚Üë‚ú∂ : ‚àÄ k {m n M N} (œÉs : Subs T m n) ‚Üí
                        let-bang‚Çó M in‚Çó N /‚ú∂ œÉs ‚Üë‚ú∂ k ‚â° let-bang‚Çó (M /‚ú∂ œÉs ‚Üë‚ú∂ k) in‚Çó (N /‚ú∂ œÉs ‚Üë‚ú∂ suc k)
  let-bang‚Çó-in‚Çó-/‚ú∂-‚Üë‚ú∂ k Œµ        = refl
  let-bang‚Çó-in‚Çó-/‚ú∂-‚Üë‚ú∂ k (œÉ ‚óÖ œÉs) = ‚â°.cong‚ÇÇ _/_ (let-bang‚Çó-in‚Çó-/‚ú∂-‚Üë‚ú∂ k œÉs) refl

ùïÑSubst : TermSubst ùïÑ
ùïÑSubst = record { var = var‚Çó; app = ùïÑApp._/_ }

open TermSubst ùïÑSubst using (_/Var_) public

module ùïÑLemma {T‚ÇÅ T‚ÇÇ} {l‚ÇÅ : Lift T‚ÇÅ ùïÑ} {l‚ÇÇ : Lift T‚ÇÇ ùïÑ} where
  open TermSubst ùïÑSubst
  open Lifted l‚ÇÅ using () renaming (_‚Üë‚ú∂_ to _‚Üë‚ú∂‚ÇÅ_; _/‚ú∂_ to _/‚ú∂‚ÇÅ_)
  open Lifted l‚ÇÇ using () renaming (_‚Üë‚ú∂_ to _‚Üë‚ú∂‚ÇÇ_; _/‚ú∂_ to _/‚ú∂‚ÇÇ_)
  open ‚â°.‚â°-Reasoning

  /‚ú∂-‚Üë‚ú∂ : ‚àÄ {m n} (œÉs‚ÇÅ : Subs T‚ÇÅ m n) (œÉs‚ÇÇ : Subs T‚ÇÇ m n) ‚Üí
          (‚àÄ k x ‚Üí var‚Çó x /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k ‚â° var‚Çó x /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k) ‚Üí
          --------------------------------------------------------
          ‚àÄ k M ‚Üí M /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k ‚â° M /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k
  /‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k (var‚Çó x)                            = hyp k x
  /‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k (Œª‚Çó T ‚àò‚Çó M)                         = begin
    Œª‚Çó T ‚àò‚Çó M /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k                                 ‚â°‚ü® ùïÑApp.Œª‚Çó‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÅ ‚ü©
    Œª‚Çó T ‚àò‚Çó (M /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ suc k)                           ‚â°‚ü® ‚â°.cong Œª‚Çó _ ‚àò‚Çó_ (/‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp (suc k) M) ‚ü©
    Œª‚Çó T ‚àò‚Çó (M /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ suc k)                           ‚â°Àò‚ü® ùïÑApp.Œª‚Çó‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÇ ‚ü©
    Œª‚Çó T ‚àò‚Çó M /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k                                 ‚àé
  /‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k (M $‚àò‚Çó N)                           = begin
    M $‚àò‚Çó N /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k                                   ‚â°‚ü® ùïÑApp.$‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÅ ‚ü©
    (M /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k) $‚àò‚Çó (N /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k)                 ‚â°‚ü® ‚â°.cong‚ÇÇ _$‚àò‚Çó_ (/‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k M)
                                                                             (/‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k N) ‚ü©
    (M /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k) $‚àò‚Çó (N /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k)                 ‚â°Àò‚ü® ùïÑApp.$‚àò‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÇ ‚ü©
    M $‚àò‚Çó N /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k                                   ‚àé
  /‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k (bang‚Çó M)                           = begin
    bang‚Çó M /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k                                   ‚â°‚ü® ùïÑApp.bang‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÅ ‚ü©
    bang‚Çó (M /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k)                                 ‚â°‚ü® ‚â°.cong bang‚Çó (/‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k M) ‚ü©
    bang‚Çó (M /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k)                                 ‚â°Àò‚ü® ùïÑApp.bang‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÇ ‚ü©
    bang‚Çó M /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k                                   ‚àé
  /‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k (let-bang‚Çó M in‚Çó N)                 = begin
    let-bang‚Çó M in‚Çó N /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k                         ‚â°‚ü® ùïÑApp.let-bang‚Çó-in‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÅ ‚ü©
    let-bang‚Çó (M /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ k) in‚Çó (N /‚ú∂‚ÇÅ œÉs‚ÇÅ ‚Üë‚ú∂‚ÇÅ suc k)   ‚â°‚ü® ‚â°.cong‚ÇÇ let-bang‚Çó_in‚Çó_ (/‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp k M)
                                                                                      (/‚ú∂-‚Üë‚ú∂ œÉs‚ÇÅ œÉs‚ÇÇ hyp (suc k) N) ‚ü©
    let-bang‚Çó (M /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k) in‚Çó (N /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ suc k)   ‚â°Àò‚ü® ùïÑApp.let-bang‚Çó-in‚Çó-/‚ú∂-‚Üë‚ú∂ _ k œÉs‚ÇÇ ‚ü©
    (let-bang‚Çó M in‚Çó N) /‚ú∂‚ÇÇ œÉs‚ÇÇ ‚Üë‚ú∂‚ÇÇ k                       ‚àé

ùïÑLemmas : TermLemmas ùïÑ
ùïÑLemmas = record
  { termSubst = ùïÑSubst
  ; app-var   = refl
  ; /‚ú∂-‚Üë‚ú∂     = ùïÑLemma./‚ú∂-‚Üë‚ú∂
  }

open TermLemmas ùïÑLemmas public hiding (var)
module V where
  open VarLemmas public

/-id : ‚àÄ n {m} {M : ùïÑ (n + m)} ‚Üí
       M / id ‚Üë‚ãÜ n ‚â° M /Var V.id V.‚Üë‚ãÜ n
/-id n {_} {M} = /‚ú∂-‚Üë‚ú∂ (Œµ ‚ñª id) (Œµ ‚ñª V.id) lemma n M
  where
    open ‚â°.‚â°-Reasoning

    lemma : ‚àÄ k x ‚Üí
            var‚Çó x / id ‚Üë‚ãÜ k ‚â° var‚Çó x /Var V.id V.‚Üë‚ãÜ k
    lemma k x                 = begin
      var‚Çó x / id ‚Üë‚ãÜ k          ‚â°‚ü® ‚â°.cong (var‚Çó x /_) (id-‚Üë‚ãÜ k) ‚ü©
      var‚Çó x / id               ‚â°‚ü® id-vanishes (var‚Çó x) ‚ü©
      var‚Çó x                    ‚â°Àò‚ü® ‚â°.cong var‚Çó (V.id-vanishes x) ‚ü©
      var‚Çó x /Var V.id          ‚â°Àò‚ü® ‚â°.cong (var‚Çó x /Var_) (V.id-‚Üë‚ãÜ k) ‚ü©
      var‚Çó x /Var V.id V.‚Üë‚ãÜ k   ‚àé

/Var-‚äô : ‚àÄ n {m l k} {M : ùïÑ (n + m)} {œÅ‚ÇÅ : Sub Fin m l} {œÅ‚ÇÇ : Sub Fin l k} ‚Üí
         M /Var (œÅ‚ÇÅ V.‚äô œÅ‚ÇÇ) V.‚Üë‚ãÜ n ‚â° (M /Var œÅ‚ÇÅ V.‚Üë‚ãÜ n) /Var œÅ‚ÇÇ V.‚Üë‚ãÜ n
/Var-‚äô n {M = M} {œÅ‚ÇÅ} {œÅ‚ÇÇ} = /‚ú∂-‚Üë‚ú∂ (Œµ ‚ñª œÅ‚ÇÅ V.‚äô œÅ‚ÇÇ) (Œµ ‚ñª œÅ‚ÇÅ ‚ñª œÅ‚ÇÇ) lemma n M
  where
    open ‚â°.‚â°-Reasoning

    lemma : ‚àÄ k x ‚Üí
            var‚Çó x /Var (œÅ‚ÇÅ V.‚äô œÅ‚ÇÇ) V.‚Üë‚ãÜ k ‚â° (var‚Çó x /Var œÅ‚ÇÅ V.‚Üë‚ãÜ k) /Var œÅ‚ÇÇ V.‚Üë‚ãÜ k
    lemma k x                                = begin
      var‚Çó x /Var (œÅ‚ÇÅ V.‚äô œÅ‚ÇÇ) V.‚Üë‚ãÜ k           ‚â°‚ü® ‚â°.cong (Œª f ‚Üí var‚Çó (Vec.lookup f x)) (V.‚Üë‚ãÜ-distrib k) ‚ü©
      var‚Çó x /Var (œÅ‚ÇÅ V.‚Üë‚ãÜ k V.‚äô œÅ‚ÇÇ V.‚Üë‚ãÜ k)    ‚â°‚ü® ‚â°.cong var‚Çó (V.lookup-‚®Ä x (Œµ ‚ñª œÅ‚ÇÅ V.‚Üë‚ãÜ k ‚ñª œÅ‚ÇÇ V.‚Üë‚ãÜ k)) ‚ü©
      (var‚Çó x /Var œÅ‚ÇÅ V.‚Üë‚ãÜ k) /Var œÅ‚ÇÇ V.‚Üë‚ãÜ k   ‚àé

/-wk‚ãÜ‚Üë‚ãÜ : ‚àÄ n m {l} {M : ùïÑ (m + l)} ‚Üí
          M / wk‚ãÜ n ‚Üë‚ãÜ m ‚â° M /Var V.wk‚ãÜ n V.‚Üë‚ãÜ m
/-wk‚ãÜ‚Üë‚ãÜ zero    m {l} {M} = /-id m {M = M}
/-wk‚ãÜ‚Üë‚ãÜ (suc n) m {l} {M} = begin
  M / wk‚ãÜ (suc n) ‚Üë‚ãÜ m                     ‚â°‚ü® ‚â°.cong (Œª œÉ ‚Üí M / œÉ ‚Üë‚ãÜ m) map-weaken ‚ü©
  M / (wk‚ãÜ n ‚äô wk) ‚Üë‚ãÜ m                    ‚â°‚ü® ‚â°.cong (M /_) (‚Üë‚ãÜ-distrib m) ‚ü©
  M / wk‚ãÜ n ‚Üë‚ãÜ m ‚äô wk ‚Üë‚ãÜ m                 ‚â°‚ü® /-‚®Ä M (Œµ ‚ñª wk‚ãÜ n ‚Üë‚ãÜ m ‚ñª wk ‚Üë‚ãÜ m) ‚ü©
  M / wk‚ãÜ n ‚Üë‚ãÜ m / wk ‚Üë‚ãÜ m                 ‚â°‚ü® ‚â°.cong (_/ wk ‚Üë‚ãÜ m) (/-wk‚ãÜ‚Üë‚ãÜ n m {M = M}) ‚ü©
  (M /Var V.wk‚ãÜ n V.‚Üë‚ãÜ m) / wk ‚Üë‚ãÜ m        ‚â°‚ü® /‚ú∂-‚Üë‚ú∂
                                                (Œµ ‚ñª wk)
                                                (Œµ ‚ñª V.wk)
                                                (Œª k x ‚Üí
                                                  begin
    var‚Çó x / wk ‚Üë‚ãÜ k                              ‚â°‚ü® var-/-wk-‚Üë‚ãÜ k x ‚ü©
    var‚Çó (Fin.lift k suc x)                       ‚â°Àò‚ü® ‚â°.cong var‚Çó (V.var-/-wk-‚Üë‚ãÜ k x) ‚ü©
    var‚Çó x /Var V.wk V.‚Üë‚ãÜ k                       ‚àé)
                                                m
                                                (M /Var V.wk‚ãÜ n V.‚Üë‚ãÜ m) ‚ü©
  (M /Var V.wk‚ãÜ n V.‚Üë‚ãÜ m) /Var V.wk V.‚Üë‚ãÜ m ‚â°Àò‚ü® /Var-‚äô m {M = M} {œÅ‚ÇÅ = V.wk‚ãÜ n} {œÅ‚ÇÇ = V.wk} ‚ü©
  M /Var (V.wk‚ãÜ n V.‚äô V.wk) V.‚Üë‚ãÜ m         ‚â°‚ü® ‚â°.cong (Œª œÅ ‚Üí M /Var œÅ V.‚Üë‚ãÜ m)
                                                (V.extensionality
                                                  Œª x ‚Üí
                                                    begin
    x V./ V.wk‚ãÜ n V.‚äô V.wk                          ‚â°‚ü® Vec.lookup-map x (V._/ V.wk) (V.wk‚ãÜ n) ‚ü©
    x V./ V.wk‚ãÜ n V./ V.wk                          ‚â°‚ü® V./-wk ‚ü©
    suc (x V./ V.wk‚ãÜ n)                             ‚â°Àò‚ü® Vec.lookup-map x suc (V.wk‚ãÜ n) ‚ü©
    x V./ V.wk‚ãÜ (suc n)                             ‚àé) ‚ü©
  M /Var V.wk‚ãÜ (suc n) V.‚Üë‚ãÜ m              ‚àé
  where
    open ‚â°.‚â°-Reasoning

<‚áívar/Var‚â°var : ‚àÄ {n m m‚Ä≤} {x : Fin (n + m)} (œÅ : Sub Fin m m‚Ä≤) ‚Üí
             (x< : Fin.to‚Ñï x < n) ‚Üí
             var‚Çó x /Var œÅ V.‚Üë‚ãÜ n ‚â° var‚Çó (Fin.from‚Ñï< (‚Ñï.<-transÀ° x< (‚Ñï.m‚â§m+n _ _)))
<‚áívar/Var‚â°var {suc _} {_} {_} {zero}  œÅ (s‚â§s z‚â§n)           = refl
<‚áívar/Var‚â°var {suc n} {_} {_} {suc x} œÅ (s‚â§s x<)
  rewrite V.suc-/-‚Üë {œÅ = œÅ V.‚Üë‚ãÜ n} x                        = begin
    weaken (var‚Çó (x V./ œÅ V.‚Üë‚ãÜ n))                            ‚â°‚ü® ‚â°.cong weaken (<‚áívar/Var‚â°var œÅ x<) ‚ü©
    weaken (var‚Çó (Fin.from‚Ñï< (‚Ñï.<-transÀ° x< (‚Ñï.m‚â§m+n _ _))))  ‚â°‚ü® ‚â°.cong weaken (‚â°.cong var‚Çó (Fin.from‚Ñï<-cong _ _ refl _ _)) ‚ü©
    weaken (var‚Çó (Fin.from‚Ñï< (‚Ñï.‚â§-trans x< (‚Ñï.m‚â§m+n _ _))))   ‚â°‚ü® weaken-var ‚ü©
    var‚Çó (suc (Fin.from‚Ñï< (‚Ñï.‚â§-trans x< (‚Ñï.m‚â§m+n _ _))))      ‚àé
  where
    open ‚â°.‚â°-Reasoning

<‚áívar/‚â°var : ‚àÄ {n m m‚Ä≤} {x : Fin (n + m)} (œÉ : ùïä m m‚Ä≤) ‚Üí
             (x< : Fin.to‚Ñï x < n) ‚Üí
             var‚Çó x / œÉ ‚Üë‚ãÜ n ‚â° var‚Çó (Fin.from‚Ñï< (‚Ñï.<-transÀ° x< (‚Ñï.m‚â§m+n _ _)))
<‚áívar/‚â°var {suc _} {_} {_} {zero}  œÉ (s‚â§s z‚â§n)              = refl
<‚áívar/‚â°var {suc n} {_} {_} {suc x} œÉ (s‚â§s x<)
  rewrite suc-/-‚Üë {œÅ = œÉ ‚Üë‚ãÜ n} x                            = begin
    var‚Çó x / œÉ ‚Üë‚ãÜ n / wk                                      ‚â°‚ü® ‚â°.cong (_/ wk) (<‚áívar/‚â°var œÉ x<) ‚ü©
    var‚Çó (Fin.from‚Ñï< (‚Ñï.<-transÀ° x< (‚Ñï.m‚â§m+n _ _))) / wk      ‚â°‚ü® ‚â°.cong (_/ wk) (‚â°.cong var‚Çó (Fin.from‚Ñï<-cong _ _ refl _ _)) ‚ü©
    var‚Çó (Fin.from‚Ñï< (‚Ñï.‚â§-trans x< (‚Ñï.m‚â§m+n _ _))) / wk       ‚â°‚ü® /-wk ‚ü©
    weaken (var‚Çó (Fin.from‚Ñï< (‚Ñï.‚â§-trans x< (‚Ñï.m‚â§m+n _ _))))   ‚â°‚ü® weaken-var ‚ü©
    var‚Çó (suc (Fin.from‚Ñï< (‚Ñï.‚â§-trans x< (‚Ñï.m‚â§m+n _ _))))      ‚àé
  where
    open ‚â°.‚â°-Reasoning

var/Varwk‚ãÜ‚â°var : ‚àÄ n {m} (x : Fin m) ‚Üí
                 var‚Çó x /Var V.wk‚ãÜ n ‚â° var‚Çó (n Fin.‚Üë ≥ x)
var/Varwk‚ãÜ‚â°var zero    {m} x        = ‚â°.cong var‚Çó (V.id-vanishes _)
var/Varwk‚ãÜ‚â°var (suc n) {m} x        = begin
    var‚Çó x /Var V.wk‚ãÜ (suc n)         ‚â°‚ü® ‚â°.cong (var‚Çó x /Var_) (V.map-weaken {œÅ = V.wk‚ãÜ n}) ‚ü©
    var‚Çó x /Var V.wk‚ãÜ n V.‚äô V.wk      ‚â°‚ü® ‚â°.cong var‚Çó (V./-‚äô {œÅ‚ÇÅ = V.wk‚ãÜ n} {œÅ‚ÇÇ = V.wk} x) ‚ü©
    weaken (var‚Çó x /Var V.wk‚ãÜ n)      ‚â°‚ü® ‚â°.cong weaken (var/Varwk‚ãÜ‚â°var n x) ‚ü©
    weaken (var‚Çó (n Fin.‚Üë ≥ x))        ‚â°‚ü® weaken-var ‚ü©
    var‚Çó (suc (n Fin.‚Üë ≥ x))           ‚àé
  where
    open ‚â°.‚â°-Reasoning

var/VarœÉ‚Üë‚ãÜ‚â°var/VarœÉ/Varwk‚ãÜ : ‚àÄ n {m m‚Ä≤} x (œÅ : Sub Fin m m‚Ä≤) ‚Üí
                             var‚Çó (n Fin.‚Üë ≥ x) /Var œÅ V.‚Üë‚ãÜ n ‚â° (var‚Çó x /Var œÅ) /Var V.wk‚ãÜ n
var/VarœÉ‚Üë‚ãÜ‚â°var/VarœÉ/Varwk‚ãÜ zero    {m} {l} x œÅ = ‚â°.cong var‚Çó (‚â°.sym (V.id-vanishes (x V./ œÅ)))
var/VarœÉ‚Üë‚ãÜ‚â°var/VarœÉ/Varwk‚ãÜ (suc n) {m} {l} x œÅ = begin
  var‚Çó (suc (n Fin.‚Üë ≥ x)) /Var œÅ V.‚Üë‚ãÜ n V.‚Üë      ‚â°‚ü® ‚â°.cong var‚Çó (V.suc-/-‚Üë {œÅ = œÅ V.‚Üë‚ãÜ n} (n Fin.‚Üë ≥ x)) ‚ü©
  (var‚Çó (n Fin.‚Üë ≥ x) /Var œÅ V.‚Üë‚ãÜ n) /Var V.wk    ‚â°‚ü® ‚â°.cong (_/Var V.wk) (var/VarœÉ‚Üë‚ãÜ‚â°var/VarœÉ/Varwk‚ãÜ n x œÅ) ‚ü©
  ((var‚Çó x /Var œÅ) /Var V.wk‚ãÜ n) /Var V.wk       ‚â°Àò‚ü® ‚â°.cong var‚Çó (V./-weaken {œÅ = V.wk‚ãÜ n} (x V./ œÅ)) ‚ü©
  (var‚Çó x /Var œÅ) /Var V.wk‚ãÜ (suc n)             ‚àé
  where
    open ‚â°.‚â°-Reasoning

var/œÉ‚Üë‚ãÜ‚â°var/œÉ/wk‚ãÜ : ‚àÄ n {m m‚Ä≤} x (œÉ : ùïä m m‚Ä≤) ‚Üí
                    var‚Çó (n Fin.‚Üë ≥ x) / œÉ ‚Üë‚ãÜ n ‚â° var‚Çó x / œÉ / wk‚ãÜ n
var/œÉ‚Üë‚ãÜ‚â°var/œÉ/wk‚ãÜ zero    x œÉ          = ‚â°.sym (id-vanishes (var‚Çó x / œÉ))
var/œÉ‚Üë‚ãÜ‚â°var/œÉ/wk‚ãÜ (suc n) x œÉ          = begin
  var‚Çó (suc (n Fin.‚Üë ≥ x)) / œÉ ‚Üë‚ãÜ suc n   ‚â°‚ü® suc-/-‚Üë {œÅ = œÉ ‚Üë‚ãÜ n} (n Fin.‚Üë ≥ x) ‚ü©
  var‚Çó (n Fin.‚Üë ≥ x) / œÉ ‚Üë‚ãÜ n / wk        ‚â°‚ü® ‚â°.cong (_/ wk) (var/œÉ‚Üë‚ãÜ‚â°var/œÉ/wk‚ãÜ n x œÉ) ‚ü©
  var‚Çó x / œÉ / wk‚ãÜ n / wk                ‚â°Àò‚ü® /-weaken {œÅ = wk‚ãÜ n} (var‚Çó x / œÉ) ‚ü©
  var‚Çó x / œÉ / wk‚ãÜ (suc n)               ‚àé
  where
    open ‚â°.‚â°-Reasoning

infixr 9 _‚Üí‚Çó_
infixr 9 Œª‚Çó_‚àô‚Çó_

_‚Üí‚Çó_ : ùïã ‚Üí ùïã ‚Üí ùïã
T ‚Üí‚Çó U = !‚Çó T ‚ä∏‚Çó U

Œª‚Çó_‚àô‚Çó_ : ùïã ‚Üí ùïÑ (suc n) ‚Üí ùïÑ n
Œª‚Çó T ‚àô‚Çó M = Œª‚Çó !‚Çó T ‚àò‚Çó let-bang‚Çó (var‚Çó 0) in‚Çó (M / wk ‚Üë)

!‚Çó-injective : ‚àÄ {T‚ÇÄ T‚ÇÅ : ùïã} ‚Üí
               !‚Çó T‚ÇÄ ‚â° !‚Çó T‚ÇÅ ‚Üí
               T‚ÇÄ ‚â° T‚ÇÅ
!‚Çó-injective refl = refl

‚ä∏‚Çó-injectiveÀ° : ‚àÄ {T‚ÇÄ U‚ÇÄ T‚ÇÅ U‚ÇÅ : ùïã} ‚Üí
                T‚ÇÄ ‚ä∏‚Çó U‚ÇÄ ‚â° T‚ÇÅ ‚ä∏‚Çó U‚ÇÅ ‚Üí
                T‚ÇÄ ‚â° T‚ÇÅ
‚ä∏‚Çó-injectiveÀ° refl = refl

‚ä∏‚Çó-injective ≥ : ‚àÄ {T‚ÇÄ U‚ÇÄ T‚ÇÅ U‚ÇÅ : ùïã} ‚Üí
                T‚ÇÄ ‚ä∏‚Çó U‚ÇÄ ‚â° T‚ÇÅ ‚ä∏‚Çó U‚ÇÅ ‚Üí
                U‚ÇÄ ‚â° U‚ÇÅ
‚ä∏‚Çó-injective ≥ refl = refl

‚ä∏‚Çó-injective : ‚àÄ {T‚ÇÄ U‚ÇÄ T‚ÇÅ U‚ÇÅ : ùïã} ‚Üí
               T‚ÇÄ ‚ä∏‚Çó U‚ÇÄ ‚â° T‚ÇÅ ‚ä∏‚Çó U‚ÇÅ ‚Üí
               (T‚ÇÄ ‚â° T‚ÇÅ) √ó (U‚ÇÄ ‚â° U‚ÇÅ)
‚ä∏‚Çó-injective = < ‚ä∏‚Çó-injectiveÀ° , ‚ä∏‚Çó-injective ≥ >

infix  4 _ùïã‚âü_
_ùïã‚âü_ : ‚àÄ (T‚ÇÄ T‚ÇÅ : ùïã) ‚Üí
       Dec (T‚ÇÄ ‚â° T‚ÇÅ)
base‚Çó      ùïã‚âü base‚Çó      = yes refl
base‚Çó      ùïã‚âü (T‚ÇÅ ‚ä∏‚Çó U‚ÇÅ) = no (Œª ())
base‚Çó      ùïã‚âü !‚Çó T‚ÇÅ      = no (Œª ())
(T‚ÇÄ ‚ä∏‚Çó U‚ÇÄ) ùïã‚âü base‚Çó      = no (Œª ())
(T‚ÇÄ ‚ä∏‚Çó U‚ÇÄ) ùïã‚âü (T‚ÇÅ ‚ä∏‚Çó U‚ÇÅ) = Dec.map‚Ä≤ (uncurry (‚â°.cong‚ÇÇ _‚ä∏‚Çó_)) ‚ä∏‚Çó-injective ((T‚ÇÄ ùïã‚âü T‚ÇÅ) Dec.√ó-dec (U‚ÇÄ ùïã‚âü U‚ÇÅ))
(T‚ÇÄ ‚ä∏‚Çó U‚ÇÄ) ùïã‚âü !‚Çó T‚ÇÅ      = no (Œª ())
!‚Çó T‚ÇÄ      ùïã‚âü base‚Çó      = no (Œª ())
!‚Çó T‚ÇÄ      ùïã‚âü (T‚ÇÅ ‚ä∏‚Çó U‚ÇÅ) = no (Œª ())
!‚Çó T‚ÇÄ      ùïã‚âü !‚Çó T‚ÇÅ      = Dec.map‚Ä≤ (‚â°.cong !‚Çó) !‚Çó-injective (T‚ÇÄ ùïã‚âü T‚ÇÅ)
